Task 2: Aggregation
Aggregation Pipeline:
Create an aggregation pipeline that calculates the average salary for employees in each position from the financial_details collection.
db.financial_details.aggregate([
  {
    $lookup: {
      from: "employees",
      localField: "employee_id",
      foreignField: "_id",
      as: "employee"
    }
  },
  {
    $unwind: "$employee"
  },
  {
    $group: {
      _id: "$employee.position",
      averageSalary: { $avg: "$salary" }
    }
  }
]);

Group and Count:
Write an aggregation query to group financial details by the employee's age from the financial_details collection and count the number of employees in each age group.
db.financial_details.aggregate([
  {
    $lookup: {
      from: "employees",
      localField: "employee_id",
      foreignField: "_id",
      as: "employee"
    }
  },
  {
    $unwind: "$employee"
  },
  {
    $group: {
      _id: "$employee.age",
      count: { $sum: 1 }
    }
  }
]);

Sorting:
Sort the projects based on their status in descending order from the projects collection.
db.financial_details.aggregate([
  {
    $lookup: {
      from: "employees",
      localField: "employee_id",
      foreignField: "_id",
      as: "employee"
    }
  },
  {
    $unwind: "$employee"
  },
  {
    $group: {
      _id: "$employee.age",
      count: { $sum: 1 }
    }
  }
]);


Projecting Fields:
Create an aggregation query to project only the name and position fields for employees who have an annual income greater than a specified value from the employees and financial_details collections.
db.employees.aggregate([
  {
    $lookup: {
      from: "financial_details",
      localField: "_id",
      foreignField: "employee_id",
      as: "financialDetails"
    }
  },
  {
    $unwind: "$financialDetails"
  },
  {
    $match: {
      "financialDetails.annual_income": { $gt: 80000 }
    }
  },
  {
    $project: {
      _id: 0,
      name: 1,
      position: 1
    }
  }
]);
